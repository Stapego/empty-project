---
// src/pages/upload.astro
import BaseLayout from '../layouts/BaseLayout.astro';

interface ImageData {
  filename: string;
}

const pageTitle = "–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π";

let recentImages: ImageData[] = [];

if (import.meta.env.SSR) {
  try {
    const imageUtils = await import('../lib/image-utils');
    recentImages = await imageUtils.getRecentImages();
    console.log('Loaded images:', recentImages); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  } catch (error) {
    console.error('Error loading images:', error);
    recentImages = [];
  }
}

const success = Astro.url.searchParams.get('success');
const error = Astro.url.searchParams.get('error');
const filename = Astro.url.searchParams.get('filename');

---

<BaseLayout title={pageTitle}>
  <main class="upload-container">
    <!-- –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ -->
    <section class="upload-section">
      <h1>{pageTitle}</h1>
      
      <form id="upload-form" class="upload-form" enctype="multipart/form-data">
        <div class="form-group">
          <input 
            type="file" 
            id="image" 
            name="image" 
            accept="image/*" 
            required
          >
          <label for="image" class="file-label">
            <span id="file-name">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª</span>
            <span class="browse-btn">–û–±–∑–æ—Ä</span>
          </label>
          <p class="hint">–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, WebP (–º–∞–∫—Å. 5MB)</p>
        </div>
        <button type="submit" class="submit-btn">–ó–∞–≥—Ä—É–∑–∏—Ç—å</button>
      </form>

      <div id="upload-status">
        {success && (
          <div class="alert success">
            <p>–§–∞–π–ª "{filename}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!</p>
          </div>
        )}
        
        {error && (
          <div class="alert error">
            <p>{error}</p>
          </div>
        )}
      </div>
    </section>

    <!-- –ì–∞–ª–µ—Ä–µ—è -->
    <section class="gallery-section">
      <h2>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ (<span id="images-count">{recentImages.length}</span>)</h2>
      
      <div id="gallery-container">
        {recentImages.length > 0 ? (
          <div class="gallery-grid">
            {recentImages.map((image) => (
              <div class="gallery-item" >
                <div class="thumbnail-container">
                  <img 
                    src={`/uploads/${image.filename}`} 
                    alt={image.filename} 
                    loading="lazy"
                    class="thumbnail"
                  />
                  <div class="image-overlay">
                    <span class="view-btn">–ü—Ä–æ—Å–º–æ—Ç—Ä</span>
                  </div>
                </div>
                <div class="image-info">
                  <span class="filename">{image.filename}</span>
                  <button class="copy-btn" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É" data-src={`/uploads/${image.filename}`}>
                    üìã
                  </button>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <p class="empty-gallery">–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</p>
        )}
      </div>
    </section>
  </main>

  <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ -->
  <div id="image-modal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close-btn">&times;</span>
      <img id="modal-image" src="" alt="" style="max-width: 90%; max-height: 80vh;" />
    </div>
  </div>

  <style>
    .upload-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    
    .upload-section, .gallery-section {
      margin-bottom: 40px;
    }
    
    .upload-form {
      background: #f5f5f5;
      padding: 20px;
      border-radius: 8px;
    }
    
    .form-group {
      margin-bottom: 15px;
    }
    
    .file-label {
      display: flex;
      align-items: center;
      cursor: pointer;
    }
    
    #file-name {
      margin-right: 10px;
    }
    
    .browse-btn {
      background: #4CAF50;
      color: white;
      padding: 8px 15px;
      border-radius: 4px;
    }
    
    .submit-btn {
      background: #2196F3;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    
    .alert {
      padding: 10px;
      margin: 10px 0;
      border-radius: 4px;
    }
    
    .success {
      background: #dff0d8;
      color: #3c763d;
    }
    
    .error {
      background: #f2dede;
      color: #a94442;
    }
    
    .gallery-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }
    
    .gallery-item {
      border: 1px solid #ddd;
      border-radius: 8px;
      overflow: hidden;
    }
    
    .thumbnail-container {
      position: relative;
      aspect-ratio: 1/1;
    }
    
    .thumbnail {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .image-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0,0,0,0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0;
      transition: opacity 0.3s;
    }
    
    .gallery-item:hover .image-overlay {
      opacity: 1;
    }
    
    .view-btn {
      color: white;
      background: rgba(0,0,0,0.7);
      padding: 8px 15px;
      border-radius: 4px;
      cursor: pointer;
    }
    
    .image-info {
      padding: 10px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .copy-btn {
      background: none;
      border: none;
      cursor: pointer;
      font-size: 1.2em;
    }
    
    /* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */
    .modal {
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.9);
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .modal-content {
      position: relative;
      max-width: 90%;
      max-height: 90%;
    }
    
    .close-btn {
      position: absolute;
      top: -40px;
      right: -40px;
      color: white;
      font-size: 35px;
      font-weight: bold;
      cursor: pointer;
    }
  </style>

  <script is:inline>
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  document.getElementById('image')?.addEventListener('change', function(e) {
    const fileName = e.target.files[0]?.name || '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª';
    document.getElementById('file-name').textContent = fileName;
  });

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
  document.getElementById('upload-form')?.addEventListener('submit', async function(e) {
  e.preventDefault();
  
  const form = e.target;
  const formData = new FormData(form);
  const fileInput = document.getElementById('image');
  const statusDiv = document.getElementById('upload-status');
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
  const file = fileInput?.files?.[0];
  if (!file) {
    showError('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
    return;
  }
  
  try {
    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const submitBtn = form.querySelector('.submit-btn');
    submitBtn.disabled = true;
    submitBtn.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const response = await fetch('/api/upload', {
      method: 'POST',
      body: formData
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if (!response.ok) {
      const errorData = await response.json().catch(() => null);
      throw new Error(errorData?.error || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
    }
    
    const result = await response.json();
    showSuccess(result.filename);
    await updateGallery();
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    showError(error.message);
  } finally {
    const submitBtn = form.querySelector('.submit-btn');
    submitBtn.disabled = false;
    submitBtn.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç—å';
    document.getElementById('file-name').textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª';
  }
});
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    function showError(message) {
      const statusDiv = document.getElementById('upload-status');
      if (statusDiv) {
        statusDiv.innerHTML = `
          <div class="alert error">
            <p>${message}</p>
          </div>
        `;
      }
    }
    
    function showSuccess(filename) {
      const statusDiv = document.getElementById('upload-status');
      if (statusDiv) {
        statusDiv.innerHTML = `
          <div class="alert success">
            <p>–§–∞–π–ª "${filename}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!</p>
          </div>
        `;
      }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏
    async function updateGallery() {
      try {
        const response = await fetch('/api/images');
        const images = await response.json();
        
        const galleryContainer = document.getElementById('gallery-container');
        const countSpan = document.getElementById('images-count');
        
        if (countSpan) {
          countSpan.textContent = images.length;
        }
        
        if (galleryContainer) {
          if (images.length > 0) {
            galleryContainer.innerHTML = `
              <div class="gallery-grid">
                ${images.map(image => `
                  <div class="gallery-item">
                    <div class="thumbnail-container">
                      <img 
                        src="/uploads/${image.filename}" 
                        alt="${image.filename}" 
                        loading="lazy"
                        class="thumbnail"
                      />
                      <div class="image-overlay">
                        <span class="view-btn">–ü—Ä–æ—Å–º–æ—Ç—Ä</span>
                      </div>
                    </div>
                    <div class="image-info">
                      <span class="filename">${image.filename}</span>
                      <button class="copy-btn" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É" data-src="/uploads/${image.filename}">
                        üìã
                      </button>
                    </div>
                  </div>
                `).join('')}
              </div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            addGalleryEventListeners();
          } else {
            galleryContainer.innerHTML = `
              <p class="empty-gallery">–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</p>
            `;
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–∞–ª–µ—Ä–µ–∏:', error);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
    function addGalleryEventListeners() {
      // –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      document.querySelectorAll('.thumbnail-container').forEach(container => {
        container.addEventListener('click', function() {
          const imgSrc = this.querySelector('img').src;
          showFullImage(imgSrc);
        });
      });
      
      // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
      document.querySelectorAll('.copy-btn').forEach(btn => {
        btn.addEventListener('click', function(e) {
          e.stopPropagation();
          const imgSrc = this.dataset.src;
          copyImageUrl(imgSrc);
        });
      });
    }
    
    // –ü–æ–∫–∞–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    function showFullImage(src) {
      const modal = document.getElementById('image-modal');
      const modalImg = document.getElementById('modal-image');
      
      if (modal && modalImg) {
        modal.style.display = 'flex';
        modalImg.src = src;
        modalImg.alt = src.split('/').pop();
      }
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.querySelector('.close-btn')?.addEventListener('click', function() {
      document.getElementById('image-modal').style.display = 'none';
    });
    
    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    function copyImageUrl(url) {
      if (!url) return;
      navigator.clipboard.writeText(url).then(() => {
        alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
      }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', err);
      });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    document.addEventListener('DOMContentLoaded', () => {
      addGalleryEventListeners();
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.has('error') || urlParams.has('success')) {
        window.history.replaceState({}, document.title, window.location.pathname);
      }
    });
  </script>
</BaseLayout>